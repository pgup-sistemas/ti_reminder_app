#!/usr/bin/env python3
"""
Script de deployment para TI Reminder App
"""
import subprocess
import sys
import os
import argparse
import json
from datetime import datetime
from pathlib import Path


def run_command(command, description, check=True):
    """Executa um comando e retorna o resultado"""
    print(f"\nüîÑ {description}")
    print(f"Comando: {command}")
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=check, 
            capture_output=True, 
            text=True
        )
        if result.returncode == 0:
            print(f"‚úÖ {description} - SUCESSO")
            if result.stdout:
                print(result.stdout)
            return True, result.stdout
        else:
            print(f"‚ùå {description} - FALHOU")
            if result.stderr:
                print("STDERR:", result.stderr)
            return False, result.stderr
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - ERRO")
        if e.stdout:
            print("STDOUT:", e.stdout)
        if e.stderr:
            print("STDERR:", e.stderr)
        return False, str(e)


def check_environment():
    """Verifica se o ambiente est√° pronto para deployment"""
    print("üîç Verificando ambiente...")
    
    checks = [
        ("python --version", "Verificando Python"),
        ("pip --version", "Verificando pip"),
        ("git --version", "Verificando Git")
    ]
    
    for command, description in checks:
        success, output = run_command(command, description)
        if not success:
            return False
    
    return True


def run_tests():
    """Executa testes antes do deployment"""
    print("üß™ Executando testes...")
    
    success, output = run_command(
        "python scripts/run_tests.py --all",
        "Executando pipeline completo de testes"
    )
    
    return success


def backup_database():
    """Cria backup do banco de dados"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"backup_db_{timestamp}.sql"
    
    print(f"üíæ Criando backup do banco de dados: {backup_file}")
    
    # Para PostgreSQL
    success, output = run_command(
        f"pg_dump $DATABASE_URL > backups/{backup_file}",
        "Criando backup PostgreSQL",
        check=False
    )
    
    if not success:
        # Para SQLite (desenvolvimento)
        success, output = run_command(
            f"cp instance/ti_reminder.db backups/ti_reminder_{timestamp}.db",
            "Criando backup SQLite",
            check=False
        )
    
    return success


def update_dependencies():
    """Atualiza depend√™ncias"""
    print("üì¶ Atualizando depend√™ncias...")
    
    success, output = run_command(
        "pip install -r requirements.txt --upgrade",
        "Atualizando depend√™ncias Python"
    )
    
    return success


def run_migrations():
    """Executa migra√ß√µes do banco de dados"""
    print("üóÑÔ∏è Executando migra√ß√µes...")
    
    commands = [
        ("flask db upgrade", "Aplicando migra√ß√µes do banco"),
        ("python init_db.py", "Inicializando dados padr√£o")
    ]
    
    for command, description in commands:
        success, output = run_command(command, description, check=False)
        if not success:
            print(f"‚ö†Ô∏è {description} falhou, mas continuando...")
    
    return True


def collect_static_files():
    """Coleta arquivos est√°ticos"""
    print("üìÅ Coletando arquivos est√°ticos...")
    
    # Minificar CSS e JS se necess√°rio
    success, output = run_command(
        "python scripts/minify_assets.py",
        "Minificando assets",
        check=False
    )
    
    return True


def restart_services():
    """Reinicia servi√ßos"""
    print("üîÑ Reiniciando servi√ßos...")
    
    services = [
        ("systemctl restart ti-reminder", "Reiniciando aplica√ß√£o"),
        ("systemctl restart nginx", "Reiniciando Nginx")
    ]
    
    for command, description in services:
        success, output = run_command(command, description, check=False)
        if not success:
            print(f"‚ö†Ô∏è {description} falhou - pode precisar de sudo")
    
    return True


def health_check():
    """Verifica se a aplica√ß√£o est√° funcionando"""
    print("üè• Verificando sa√∫de da aplica√ß√£o...")
    
    import requests
    import time
    
    # Aguardar um pouco para a aplica√ß√£o iniciar
    time.sleep(5)
    
    try:
        response = requests.get("http://localhost:5000/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Aplica√ß√£o est√° respondendo corretamente")
            return True
        else:
            print(f"‚ùå Aplica√ß√£o retornou status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar aplica√ß√£o: {e}")
        return False


def create_deployment_log():
    """Cria log do deployment"""
    timestamp = datetime.now().isoformat()
    
    log_data = {
        "timestamp": timestamp,
        "version": get_app_version(),
        "environment": os.getenv("FLASK_ENV", "production"),
        "deployed_by": os.getenv("USER", "unknown"),
        "git_commit": get_git_commit()
    }
    
    os.makedirs("logs", exist_ok=True)
    
    with open(f"logs/deployment_{timestamp.replace(':', '-')}.json", "w") as f:
        json.dump(log_data, f, indent=2)
    
    print(f"üìù Log de deployment criado: {log_data}")


def get_app_version():
    """Obt√©m vers√£o da aplica√ß√£o"""
    try:
        with open("version.txt", "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        return "unknown"


def get_git_commit():
    """Obt√©m hash do commit atual"""
    success, output = run_command("git rev-parse HEAD", "Obtendo commit hash", check=False)
    return output.strip() if success else "unknown"


def deploy_production():
    """Pipeline completo de deployment para produ√ß√£o"""
    print("üöÄ INICIANDO DEPLOYMENT PARA PRODU√á√ÉO")
    print("="*60)
    
    steps = [
        (check_environment, "Verifica√ß√£o do ambiente"),
        (run_tests, "Execu√ß√£o de testes"),
        (backup_database, "Backup do banco de dados"),
        (update_dependencies, "Atualiza√ß√£o de depend√™ncias"),
        (run_migrations, "Execu√ß√£o de migra√ß√µes"),
        (collect_static_files, "Coleta de arquivos est√°ticos"),
        (restart_services, "Reinicializa√ß√£o de servi√ßos"),
        (health_check, "Verifica√ß√£o de sa√∫de"),
        (create_deployment_log, "Cria√ß√£o de log")
    ]
    
    for step_func, description in steps:
        print(f"\nüìã Executando: {description}")
        try:
            success = step_func()
            if not success and step_func in [check_environment, run_tests]:
                print(f"‚ùå Deployment interrompido em: {description}")
                return False
        except Exception as e:
            print(f"‚ùå Erro em {description}: {e}")
            if step_func in [check_environment, run_tests]:
                return False
    
    print("\nüéâ DEPLOYMENT CONCLU√çDO COM SUCESSO!")
    return True


def deploy_staging():
    """Pipeline de deployment para staging"""
    print("üß™ INICIANDO DEPLOYMENT PARA STAGING")
    print("="*50)
    
    steps = [
        (check_environment, "Verifica√ß√£o do ambiente"),
        (run_tests, "Execu√ß√£o de testes"),
        (update_dependencies, "Atualiza√ß√£o de depend√™ncias"),
        (run_migrations, "Execu√ß√£o de migra√ß√µes"),
        (health_check, "Verifica√ß√£o de sa√∫de")
    ]
    
    for step_func, description in steps:
        print(f"\nüìã Executando: {description}")
        try:
            success = step_func()
            if not success and step_func in [check_environment, run_tests]:
                print(f"‚ùå Deployment interrompido em: {description}")
                return False
        except Exception as e:
            print(f"‚ùå Erro em {description}: {e}")
    
    print("\n‚úÖ DEPLOYMENT DE STAGING CONCLU√çDO!")
    return True


def main():
    """Fun√ß√£o principal"""
    parser = argparse.ArgumentParser(description="Deploy do TI Reminder App")
    parser.add_argument("--env", choices=["production", "staging"], default="staging",
                       help="Ambiente de deployment")
    parser.add_argument("--skip-tests", action="store_true", 
                       help="Pular execu√ß√£o de testes")
    parser.add_argument("--skip-backup", action="store_true",
                       help="Pular backup do banco")
    parser.add_argument("--dry-run", action="store_true",
                       help="Simular deployment sem executar")
    
    args = parser.parse_args()
    
    if args.dry_run:
        print("üîç MODO DRY-RUN - Simulando deployment")
        print(f"Ambiente: {args.env}")
        print(f"Pular testes: {args.skip_tests}")
        print(f"Pular backup: {args.skip_backup}")
        return
    
    # Criar diret√≥rios necess√°rios
    os.makedirs("backups", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    
    if args.env == "production":
        success = deploy_production()
    else:
        success = deploy_staging()
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
